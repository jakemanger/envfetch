% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_over_space.R
\name{extract_over_space}
\alias{extract_over_space}
\title{Extract Values from a Raster Layer over a space}
\usage{
extract_over_space(
  x,
  r,
  spatial_fun = mean,
  na.rm = TRUE,
  chunk = TRUE,
  max_ram_frac_per_chunk = 1,
  extraction_fun = terra::extract,
  resample_scale = NULL,
  resample_fun = NULL,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{x}{An sf spatial object, representing the locations over which raster
values need to be extracted.}

\item{r}{A \code{terra::SpatRaster} object, representing the raster layer from
which values need to be extracted.}

\item{spatial_fun}{Function used to summarise multiple values within a
polygon or line. Is passed to \code{extraction_fun} internally. Defaults to
\code{mean}.}

\item{na.rm}{Whether to remove NA values when summarising with the
\code{spatial_fun} function.}

\item{chunk}{Logical. If \code{TRUE}, the raster will be split into chunks based
on available RAM and processed chunk by chunk. If \code{FALSE}, the raster will be
processed as a whole. Default is \code{TRUE}.}

\item{max_ram_frac_per_chunk}{The maximum fraction of available memory to use
for each extraction chunk.}

\item{extraction_fun}{The extraction function to use. Default is
\code{terra::extract}.}

\item{resample_scale}{The scale to resample your raster to (in units of the
original raster). Leave as NULL (the default) if you do not want any
resampling.}

\item{resample_fun}{The function to use for resampling. See \code{method} in
\link[terra]{resample}.}

\item{verbose}{Whether to print messages to the console. Defaults to TRUE.}

\item{...}{Additional arguments to pass to \code{terra::extract}.}
}
\value{
A matrix or list where each column corresponds to a raster layer and
each row corresponds to a geometry in \code{x}. The values represent the raster
values at each point's location.
}
\description{
This function extracts values from a raster layer (r) over a spatial object
(x).
If the spatial object contains multiple z indices (e.g. time), then spatial
extractions for each time will be returned.
It also ensures that the extraction does not exceed available RAM. If the
raster is too large, the function can chunk the raster into smaller pieces
and process each chunk sequentially to avoid memory overflow.
}
\details{
This function uses the \code{terra::mem_info} function to assess the RAM
requirements for the extraction. If chunking is required (i.e., the raster
data does not fit in available RAM), the raster is divided into a number of
chunks such that each chunk's RAM requirement does not exceed the available
RAM. The function then processes each chunk sequentially, extracting the
raster values over the spatial object, and combines the results at the end.
Progress of the extraction is displayed.
}
\examples{
# Assuming 'some_raster' is a terra::SpatRaster object and 'some_sp' is a
# spatial object:
# result <- extract_over_space(x=some_sp, r=some_raster)
}
