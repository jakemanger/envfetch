[{"path":"https://jakemanger.github.io/envfetch/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 envfetch authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jakemanger.github.io/envfetch/articles/comparison.html","id":"extract-once","dir":"Articles","previous_headings":"","what":"Extract once","title":"Comparison with other extraction methods","text":"simplest approach extract space time summarise rasters temporally extract spatially within locations vector data. one time range, existing solutions well suited task. example terra package: Taking first approach multiple time ranges starts give us problems. approach scale, need repeat extraction multiple times time range. results us requiring approximately twice time two time ranges, triple time three time ranges .  vector data many time ranges, faster solution instead one single extraction time ranges summarise data. avoids repeating expensive extraction operation.","code":"one_time_range <- p one_time_range$time_column <- interval(start='2018-01-01', end='2018-01-02') extract_one_time_range <- function() {   mean_r <- mean(r[[time(r) >= '2018-01-01' & time(r) <= '2018-01-02']])   return(extract(mean_r, one_time_range)) }  head(extract_one_time_range()) #>   ID mean #> 1  1 63.0 #> 2  2 66.5 #> 3  3 66.5 #> 4  4 70.0 #> 5  5 59.5 #> 6  6 64.5  microbenchmark::microbenchmark(   extract_one_time_range(),   times=num_benchmark_repeats ) #> Unit: milliseconds #>                      expr      min      lq     mean   median       uq     max #>  extract_one_time_range() 25.45823 25.7993 37.15441 25.93303 26.56069 82.0208 #>  neval #>      5 extract_n_time_ranges <- function(n, p, r) {   unique_time_ranges <- unique(p$time_column)   unique_time_ranges <- unique_time_ranges[1:n]   # loop through each unique time range and extract   for(i in seq_len(length(unique_time_ranges))) {     t <- unique_time_ranges[i]     indx <- as.character(p$time_column) == as.character(t)     mean_r <- mean(r[[time(r) >= int_start(t) & time(r) <= int_end(t)]])     subset <- p[indx,]     p$extracted[indx] <- extract(mean_r, subset, ID=FALSE)$mean   }   return(p) }  bm <- microbenchmark::microbenchmark(   extract_n_time_ranges(n = 1, p, r),   extract_n_time_ranges(n = 2, p, r),   extract_n_time_ranges(n = 4, p, r),   extract_n_time_ranges(n = 8, p, r),   extract_n_time_ranges(n = 16, p, r),   extract_n_time_ranges(n = 32, p, r),   extract_n_time_ranges(n = 64, p, r),   extract_n_time_ranges(n = 128, p, r),   times=num_benchmark_repeats ) bm #> Unit: milliseconds #>                                  expr        min         lq       mean #>    extract_n_time_ranges(n = 1, p, r)   27.44140   31.62757   36.08675 #>    extract_n_time_ranges(n = 2, p, r)   54.43676   59.86843   68.34834 #>    extract_n_time_ranges(n = 4, p, r)   91.79607   97.80014  109.63029 #>    extract_n_time_ranges(n = 8, p, r)  180.98658  181.40988  197.75527 #>   extract_n_time_ranges(n = 16, p, r)  357.68348  361.21339  390.64894 #>   extract_n_time_ranges(n = 32, p, r)  706.60187  713.34007  805.53002 #>   extract_n_time_ranges(n = 64, p, r) 1418.96821 1425.39308 1561.40054 #>  extract_n_time_ranges(n = 128, p, r) 2963.58808 2997.62796 3356.13717 #>      median         uq        max neval #>    33.20024   39.46661   48.69791     5 #>    62.88997   81.56425   82.98229     5 #>   109.76728  123.51309  125.27489     5 #>   183.35136  189.47982  253.54874     5 #>   361.44171  419.24629  453.65982     5 #>   769.75713  885.35870  952.59232     5 #>  1579.16911 1651.68968 1731.78260     5 #>  3255.74714 3748.75837 3814.96433     5 autoplot(bm) extract_once <- function(n, p, r) {   # subset to only have the time columns we are interested in   time_column <- p$time_column   unique_time_ranges <- unique(time_column)   index <- time_column %in% unique_time_ranges[1:n]   p <- p[index,]      x <- sf::st_drop_geometry(p)      extracted <- extract(r, p, ID=FALSE)   times <- time(r)    return(     envfetch:::non_vectorised_summarisation(       x = x,       extracted = extracted,       IDs = 1:nrow(x),       temporal_fun = mean,       tms = times,       nms = names(extracted),       time_column_name = 'time_column',       new_col_names = c('L7_ETMs'),       multi_values_in_extraction_per_row = FALSE     )   ) }  extracted_multiple_times <- extract_n_time_ranges(n = 128, p, r) extracted_once <- extract_once(n = 128, p, r)  identical(extracted_multiple_times$extracted, extracted_once$L7_ETMs) #> [1] TRUE  bm <- microbenchmark::microbenchmark(   extract_n_time_ranges(n = 128, p, r),   extract_once(n = 128, p, r),   times=num_benchmark_repeats ) bm #> Unit: seconds #>                                  expr      min       lq     mean   median #>  extract_n_time_ranges(n = 128, p, r) 2.904303 3.085495 3.296403 3.250362 #>           extract_once(n = 128, p, r) 1.234733 1.258795 1.484642 1.556721 #>        uq      max neval #>  3.535701 3.706151     5 #>  1.675362 1.697599     5 autoplot(bm)"},{"path":"https://jakemanger.github.io/envfetch/articles/comparison.html","id":"only-extract-the-time-slices-you-are-interested-in","dir":"Articles","previous_headings":"","what":"Only extract the time slices you are interested in","title":"Comparison with other extraction methods","text":"Although ’s faster extract , may still slow cases raster stack large times extract far one another raster stack. solution need extract time slices data. simple optimisation trim time range raster around minimum maximum vector data, e.g.  r[[times(r) > min_time & times(r) < min_time]]. help time ranges wish extract close together within raster stack. also optimise cases, especially time ranges far one another, can extract time slices interested . achievable sub-setting raster extraction relevant time slices (calculated find_relevant_time_slices() function envfetch). Note, time calculate relevant time slices can benefit reduced extraction time ranges extract close one another raster stack small. can see plot extracting need benefit extracting large raster time slices far one another.  cases intend extract single time slices time ranges geometry, also implemented wrapper around approach used stars st_extract function. uses similar approach extracting time slices needed.","code":"large_p <- p large_p$time_column <- interval(   int_start(large_p$time_column) + years(5),   int_end(large_p$time_column) + years(5) )    large_p <- rbind(p, large_p) dates <- seq(min(int_start(large_p$time_column)), max(int_end(large_p$time_column)), 'day') large_r <- rast(tif) large_r <- rep(large_r, 326)[[1:1955]] time(large_r) <- dates  extract_only_what_we_need <- function(n, p, r) {   # subset to only have the time columns we are interested in   time_column <- p$time_column   unique_time_ranges <- unique(time_column)   index <- time_column %in% unique_time_ranges[1:n]   p <- p[index,]      x <- sf::st_drop_geometry(p)    relevant_time_slices <- envfetch:::find_relevant_time_slices(time(r), x$time_column)      r <- r[[relevant_time_slices]]      extracted <- extract(r, p, ID=FALSE)   times <- time(r)      return(     envfetch:::non_vectorised_summarisation(       x = x,       extracted = extracted,       IDs = 1:nrow(x),       temporal_fun = mean,       tms = times,       nms = names(extracted),       time_column_name = 'time_column',       new_col_names = c('L7_ETMs'),       multi_values_in_extraction_per_row = FALSE     )   ) }  extracted_only_what_we_need <- extract_only_what_we_need(n = 128, p, r)  identical(extracted_multiple_times$extracted, extracted_only_what_we_need$L7_ETMs) #> [1] TRUE  bm <- microbenchmark::microbenchmark(   extract_n_time_ranges(n = 128, p, r),   extract_once(n = 128, p, r),   extract_only_what_we_need(n = 128, p, r),   extract_n_time_ranges(n = 256, large_p, large_r),   extract_once(n = 256, large_p, large_r),   extract_only_what_we_need(n = 256, large_p, large_r),   times=num_benchmark_repeats ) bm #> Unit: seconds #>                                                  expr      min       lq #>                  extract_n_time_ranges(n = 128, p, r) 2.915962 3.052463 #>                           extract_once(n = 128, p, r) 1.238042 1.242041 #>              extract_only_what_we_need(n = 128, p, r) 1.490884 1.511225 #>      extract_n_time_ranges(n = 256, large_p, large_r) 6.247511 6.319033 #>               extract_once(n = 256, large_p, large_r) 3.463964 3.655003 #>  extract_only_what_we_need(n = 256, large_p, large_r) 4.325404 4.478563 #>      mean   median       uq      max neval #>  3.261666 3.338140 3.413433 3.588334     5 #>  1.296904 1.255624 1.292521 1.456295     5 #>  1.613402 1.628754 1.693775 1.742370     5 #>  6.327814 6.326538 6.370509 6.375479     5 #>  3.664313 3.666039 3.692901 3.843657     5 #>  4.674067 4.485122 4.872006 5.209237     5 autoplot(bm)"},{"path":"https://jakemanger.github.io/envfetch/articles/comparison.html","id":"vectorise-summarisation-functions","dir":"Articles","previous_headings":"","what":"Vectorise summarisation functions","title":"Comparison with other extraction methods","text":"Another optimisation summarisation step. R slow running tasks repeatedly (e.g. row row). Offsetting task faster programming language hood possible vectorised functions. Functions like rowMeans() rowSums() written C instead R. result, don’t require much overhead (R interpreter), giving us performance gains.","code":"extract_only_what_we_need_vectorised <- function(n) {   # subset to only have the time columns we are interested in   time_column <- p$time_column   unique_time_ranges <- unique(time_column)   index <- time_column %in% unique_time_ranges[1:n]   p <- p[index,]      x <- sf::st_drop_geometry(p)    relevant_time_slices <- envfetch:::find_relevant_time_slices(time(r), x$time_column)      r <- r[[relevant_time_slices]]      extracted <- extract(r, p, ID=FALSE)   times <- time(r)      return(     envfetch:::vectorised_summarisation(       x = x,       extracted = extracted,       temporal_fun = rowMeans,       tms = times,       nms = names(extracted),       time_column_name = 'time_column',       new_col_names = c('L7_ETMs')     )   ) }  extracted_only_what_we_need_vectorised <- extract_only_what_we_need_vectorised(n = 128)  identical(extracted_only_what_we_need$L7_ETMs, extracted_only_what_we_need_vectorised$L7_ETMs) #> [1] TRUE  bm <- microbenchmark::microbenchmark(   extract_only_what_we_need(n = 128, p, r),   extract_only_what_we_need_vectorised(n = 128),   times=num_benchmark_repeats ) bm #> Unit: milliseconds #>                                           expr       min        lq      mean #>       extract_only_what_we_need(n = 128, p, r) 1458.9340 1467.7678 1483.0301 #>  extract_only_what_we_need_vectorised(n = 128)  470.8823  472.1714  483.4074 #>     median       uq      max neval #>  1482.0416 1499.382 1507.025     5 #>   487.6604  488.694  497.629     5 autoplot(bm)"},{"path":"https://jakemanger.github.io/envfetch/articles/comparison.html","id":"dont-repeat-yourself","dir":"Articles","previous_headings":"","what":"Don’t repeat yourself","title":"Comparison with other extraction methods","text":"Finally, using existing packages repeated data results repeated extractions. , provide extraction functions data point multiple times, extract point multiple times.  Similarly, already extracted data , extract ? Saving data extraction reloading needed convenient saves time, especially extraction pipeline fails crashes part way want use data R sessions. convenience, storing data future requests (caching) done automatically envfetch().","code":"duplicated_p <- p[rep(seq_len(nrow(p)), each = 20),]  extract_duplicated_only_what_we_need_vectorised <- function(n) {   # subset to only have the time columns we are interested in   time_column <- duplicated_p$time_column   unique_time_ranges <- unique(time_column)   index <- time_column %in% unique_time_ranges[1:n]   duplicated_p <- duplicated_p[index,]      x <- sf::st_drop_geometry(duplicated_p)    relevant_time_slices <- envfetch:::find_relevant_time_slices(time(r), x$time_column)      r <- r[[relevant_time_slices]]      extracted <- extract(r, duplicated_p, ID=FALSE)   times <- time(r)      return(     envfetch:::vectorised_summarisation(       x = x,       extracted = extracted,       temporal_fun = rowMeans,       tms = times,       nms = names(extracted),       time_column_name = 'time_column',       new_col_names = c('L7_ETMs')     )   ) }  repeated_extraction_without_duplicates <- extract_only_what_we_need_vectorised(n = 128) repeated_extraction_with_duplicates <- extract_duplicated_only_what_we_need_vectorised(n = 128)  non_repeated_extraction_without_duplicates <- envfetch(p, r, use_cache=FALSE, verbose=FALSE) non_repeated_extraction_with_duplicates <- envfetch(duplicated_p, r, use_cache=FALSE, verbose=FALSE)  identical(repeated_extraction_with_duplicates$L7_ETMs, non_repeated_extraction_with_duplicates$L7_ETMs) #> [1] TRUE  bm <- microbenchmark::microbenchmark(   extract_only_what_we_need_vectorised(n = 128),   extract_duplicated_only_what_we_need_vectorised(n = 128),   envfetch(p, r, use_cache=FALSE, verbose=FALSE),   envfetch(duplicated_p, r, use_cache=FALSE, verbose=FALSE),   times=num_benchmark_repeats ) bm #> Unit: milliseconds #>                                                           expr       min #>                  extract_only_what_we_need_vectorised(n = 128)  461.8787 #>       extract_duplicated_only_what_we_need_vectorised(n = 128) 1138.8091 #>             envfetch(p, r, use_cache = FALSE, verbose = FALSE) 1933.9714 #>  envfetch(duplicated_p, r, use_cache = FALSE, verbose = FALSE) 1954.1011 #>         lq      mean    median        uq      max neval #>   461.9401  466.8124  466.5142  471.5651  472.164     5 #>  1140.4238 1198.5104 1154.9586 1172.6416 1385.719     5 #>  1936.0873 1936.3364 1936.1135 1937.2932 1938.216     5 #>  1957.7536 2011.8230 1958.9421 1967.6205 2220.698     5 autoplot(bm) extracted <- envfetch(p, r)  # after running the first time above, the result is loaded straight from the cache # and not computed again extracted <- envfetch(p, r)"},{"path":"https://jakemanger.github.io/envfetch/articles/comparison.html","id":"x-speed-improvement","dir":"Articles","previous_headings":"","what":"> 15x speed improvement","title":"Comparison with other extraction methods","text":"optimisations result speed benefits found envfetch function.  Going naive extraction solution small example (128 time intervals), changed extraction time 15 seconds 1 second. speed 15x. Note, benefits get larger number time intervals need extracted far time time intervals one another raster file. Extraction tasks otherwise take multiple days can achievable minutes hours envfetch. ensure extraction process possible lower-end machines, strategies optimise RAM usage described .","code":"bm <- microbenchmark::microbenchmark(   extract_n_time_ranges(n = 128, p, r),   envfetch(p, r, use_cache = FALSE, verbose = FALSE),   times=num_benchmark_repeats ) #> |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                          |---------|---------|---------|---------|=========================================                                           bm #> Unit: seconds #>                                                expr      min       lq     mean #>                extract_n_time_ranges(n = 128, p, r) 2.824019 2.861804 2.925474 #>  envfetch(p, r, use_cache = FALSE, verbose = FALSE) 1.925748 1.933606 1.946099 #>    median       uq      max neval #>  2.905737 2.915974 3.119837     5 #>  1.934837 1.937643 1.998660     5 autoplot(bm)"},{"path":"https://jakemanger.github.io/envfetch/articles/comparison.html","id":"dont-overuse-ram","dir":"Articles","previous_headings":"","what":"Don’t overuse RAM","title":"Comparison with other extraction methods","text":"ideal world, best extract data necessary extraction . However, amount data computer can extract limited much RAM . allow computers less RAM complete extraction task, can separate extractions smaller chunks. can processed one time, limiting RAM usage within available limits. implemented automatic system extract data chunks extract_over_space function, used internally envfetch(). Remember, optimisations built envfetch() function don’t need repeat extracting dataset.","code":""},{"path":"https://jakemanger.github.io/envfetch/articles/comparison.html","id":"run-on-google-cloud","dir":"Articles","previous_headings":"","what":"Run on google cloud","title":"Comparison with other extraction methods","text":"cases downloading local files extracting data possible practical, cloud solutions can provide performant alternative. largest commonly used cloud-based geospatial analysis platform Google Earth Engine. Currently, one R package implemented extraction function Google earth engine, rgee. However, large datasets extraction tasks, standard use rgee::ee_extract function can causes crashes overuse Google Earth Engine’s memory limits, failing extraction task. implemented processing data chunks extract_gee function, used internally envfetch(), allow processing data, remaining within quota limits (https://developers.google.com/earth-engine/guides/usage#adjustable_quota_limits). Using ee_extract rgee default fail dataset. envfetch process task chunks ensure fail. also summarise data . chunk size can optimised particular task modifying max_chunk_time_day_range max_feature_collection_size arguments envfetch().","code":"rgee::ee_Initialize() # first half of extraction process (extracting between all time ranges) p_feature <- rgee::sf_as_ee(sf::st_geometry(large_p))  ic <- rgee::ee$ImageCollection('MODIS/061/MOD13Q1')$   filterBounds(p_feature)$   filterDate(     as.character(as_date(min(int_start(p$time_column)))),     as.character(as_date(max(int_end(p$time_column))))   )  rgee_extracted <- rgee::ee_extract(   x = ic,   y = p_feature,   scale = 250,   fun = rgee::ee$Reducer$mean(),   lazy = FALSE,   sf = TRUE, ) #> Error in py_call_impl(callable, call_args$unnamed, call_args$named) : #> ee.ee_exception.EEException: User memory limit exceeded. #> Run `reticulate::py_last_error()` for details.  # ... you would then also need to make a custom solution to summarise this data envfetch_extracted <- envfetch(large_p, 'MODIS/061/MOD13Q1') #> ── rgee 1.1.5 ───────────────────────────────────────────────────────────────────────────────────────── earthengine-api 0.1.374 ──  #>  ✔ user: not_defined #>  ✔ Initializing Google Earth Engine:  DONE! #>  ✔ Earth Engine account: users/dungbeetlelab  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  #>  #> ── 🥏 🐕 Fetching your data ────────────────────────────────────────────────────────────────────────────────────────────────────── #> → Parsing time column #> ℹ Running ~extract_gee(x = .x, collection_name = r, bands = bands, temporal_fun = temporal_fun, ee_reducer_fun = spatial_fun, initialise_gee = FALSE, ...) #> Number of features: 500                      #> Number of features: 500                                               17% | ETA:  3m #> Number of features: 24                     ■■■■                       33% | ETA:  3m #> Number of features: 500                     ■■■■■■■■                  50% | ETA:  2m #> Number of features: 500                     ■■■■■■■■■■■■■             67% | ETA:  1m #> Number of features: 24                     ■■■■■■■■■■■■■■■■■■■        83% | ETA: 44s #> → Summarising extracted data over specified times                                     #> ✔ 🐶 Completed ~extract_gee(x = .x, collection_name = r, bands = bands, temporal_fun = temporal_fun, ee_reducer_fun = spatial_fun, initialise_gee = FALSE, ...) #>  #> ── 🐩 Fetched ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"https://jakemanger.github.io/envfetch/articles/using-internal-functions-of-envfetch.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Using internal functions of envfetch","text":"multiple functions used main wrapper envfetch function. ’d like use , replicated main README.md functionality, using internal functions envfetch, .","code":""},{"path":"https://jakemanger.github.io/envfetch/articles/using-internal-functions-of-envfetch.html","id":"setup-table-of-data-with-throw","dir":"Articles","previous_headings":"Overview","what":"1. Setup table of data with throw","title":"Using internal functions of envfetch","text":"Use envfetch starts table: dataframe, tibble sf object. begin, need create data table containing grid points Australia range times. applications, dataset. data, load variable called d. However, example, can generate using throw function. data set look like : can visualized plot: data point table sf::geometry object along datetime (lubridate::interval date string). Ensure data used envfetch package matches format. geometry may point polygon. may also just use plain old x y coordinates separate columns. individual data point use datetime object decide time range extract summarise data . datetime can time range (lubridate::interval), single date (e.g. \"20220101\") datetime \"2010-08-03 00:50:50\".","code":"library(envfetch)  d <- throw(   offset=c(128, -30),   cellsize=1,   n=10,   time_interval=lubridate::interval(start='2017-01-01', end='2017-01-02'), ) summary(d) ##             time_column                  geometry   ##  Intervals        :100          POINT        :100   ##  Earliest endpoint:2017-01-01   epsg:4326    :  0   ##  Latest endpoint  :2017-01-02   +proj=long...:  0   ##  Time zone        :UTC library(ggplot2) library(rnaturalearth) library(rnaturalearthdata) ##  ## Attaching package: 'rnaturalearthdata' ## The following object is masked from 'package:rnaturalearth': ##  ##     countries110 # load map of australia for reference world <- ne_countries(scale = \"medium\", returnclass = \"sf\") australia <- subset(world, admin == \"Australia\")  ggplot(data = australia) +   geom_sf() +   geom_sf(data = d, size = 1, show.legend = \"point\") +   ggtitle(\"Australia with sample points\") +   theme_minimal()"},{"path":"https://jakemanger.github.io/envfetch/articles/using-internal-functions-of-envfetch.html","id":"extract-from-your-data-sources-with-fetch","dir":"Articles","previous_headings":"Overview","what":"2. Extract from your data sources with fetch","title":"Using internal functions of envfetch","text":"fetch: passes data supplied extraction functions, caches progress, function crashes somewhere, can continue left allows repeat sampling across different times (see section 3, ). can supply data extraction function fetch, useful built-data extraction functions provided: Note, get_daynight_times function provides example extend caching mechanism envfetch purpose extracting data raster files. example, use: extract_over_time extract large pre-downloaded NetCDF file extract_gee extract NDVI data MODIS MOD13Q1 dataset Google Earth Engine fetch data, use fetch function supply extraction functions like use. can supply custom function , ensure use anonymous function syntax can specify custom arguments. , following purrr formula syntax: ~your_function(.x, custom_arg='arg_value') following base R, function(x) your_function(x, custom_arg='arg_value')). Note, .x example data set, d.","code":"extracted <- d |>   fetch(     ~extract_over_time(.x, r = '/path/to/netcdf.nc'),     ~extract_gee(        .x,        collection_name='MODIS/061/MOD13Q1',        bands=c('NDVI', 'DetailedQA'),        time_buffer=16,      )   )"},{"path":"https://jakemanger.github.io/envfetch/articles/using-internal-functions-of-envfetch.html","id":"obtain-data-for-repeated-time-intervals","dir":"Articles","previous_headings":"Overview","what":"3. Obtain data for repeated time intervals","title":"Using internal functions of envfetch","text":"certain applications, may need obtain environmental data repeated previous time periods. example, can extract data past six months relative time (start time interval provided) data point, average calculated two-week block, using .time_rep variable.","code":"rep_extracted <- d |>   fetch(     ~extract_over_time(.x, r = '/path/to/netcdf.nc'),     ~extract_gee(        .x,        collection_name='MODIS/061/MOD13Q1',        bands=c('NDVI', 'DetailedQA'),        time_buffer=16,      ),     .time_rep=time_rep(interval=lubridate::days(14), n_start=-12),   )"},{"path":"https://jakemanger.github.io/envfetch/articles/using-internal-functions-of-envfetch.html","id":"integrate-other-packages-and-create-your-own-fetch-function","dir":"Articles","previous_headings":"","what":"Integrate other packages and create your own fetch function","title":"Using internal functions of envfetch","text":"cases, may want combine envfetch third party tools. , illustrate weatherOz R package. Visit link see project details licensing. , want obtain environmental data repeated previous time periods, can add time_rep value. extract data past six months relative time (start time interval provided) data point, average calculated two-week block, using .time_rep variable.","code":"# install.packages(\"weatherOz\", repos = \"https://ropensci.r-universe.dev\") library(weatherOz) library(envfetch) library(tidyverse) library(cli)  # authenticate with SILO using the weatherOz package get_key(service = \"SILO\")  # make a wrapper function to adapt weatherOz for envfetch data inputs  get_data_drill_wrapper <- function(x, summary_fn=mean) {   points <- sf::st_centroid(x)   coords <- sf::st_coordinates(points) %>%     as_tibble()    cli_progress_step(\"Fetching weather data for {nrow(coords)} location{?s}\")    results <- map(1:nrow(coords), function(i) {     cli_progress_message(\"Processing location {i}/{nrow(coords)}\")      start_date <- as.Date(lubridate::int_start(x$time_column[i]))     end_date <- as.Date(lubridate::int_end(x$time_column[i]))      # use a tryCatch as requests with no result raise errors     # we just want NAs in those cases.     result <- tryCatch({       dat <- get_data_drill(         latitude = coords$Y[i],         longitude = coords$X[i],         start_date = start_date,         end_date = end_date       )       # aggregate the data for this location       summarised <- dat %>%         select(-any_of(c(\"date\", \"latitude\", \"longitude\", \"date\", \"extracted\"))) %>%         summarise(           # summarise everything except elevation           across(-elev_m, ~ summary_fn(.x, na.rm = TRUE)),           # special-case elevation: strip \" m\", convert numeric, summarise           elev_m = summary_fn(as.numeric(gsub(\" m$\", \"\", elev_m)), na.rm = TRUE)         )       return(summarised)     }, error = function(e) {       cli_alert_warning(\"Error for location {i}: {e$message}\")       # return a row with NAs but proper structure       return(tibble(         latitude = coords$Y[i],         longitude = coords$X[i],         date = as.Date(NA),         max_temp = NA_real_,         min_temp = NA_real_,         rain = NA_real_       ))     })      return(result)   })    combined_results <- bind_rows(results)   combined_results <- combined_results   return(combined_results) }   # extract with the `fetch` function from `envfetch` extracted_weatherOz <- d[1:5,] %>%   fetch(     ~get_data_drill_wrapper(.x, mean),     use_cache = FALSE   ) # extract with the `fetch` function from `envfetch` # and repeat extractions calculating averages for each two-week block for the last # 6 months extracted_weatherOz <- d[1:5,] %>%   fetch(     ~get_data_drill_wrapper(.x, mean),     use_cache = FALSE,     .time_rep=time_rep(interval=lubridate::days(14), n_start=-12)   )"},{"path":"https://jakemanger.github.io/envfetch/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jake Manger. Author, maintainer. Jacob Berson. Author.","code":""},{"path":"https://jakemanger.github.io/envfetch/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Manger J, Berson J (2025). envfetch: Fetch environmental data spatio-temporal geometries. R package version 0.0.0.9000, https://jakemanger.github.io/envfetch/.","code":"@Manual{,   title = {envfetch: Fetch environmental data over spatio-temporal geometries},   author = {Jake Manger and Jacob Berson},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://jakemanger.github.io/envfetch/}, }"},{"path":"https://jakemanger.github.io/envfetch/index.html","id":"envfetch-","dir":"","previous_headings":"","what":"Fetch environmental data over spatio-temporal geometries","title":"Fetch environmental data over spatio-temporal geometries","text":"trusty companion fetch, extract summarise environmental data space (sf points polygons) time (lubridate time interval, single date datetime).","code":""},{"path":"https://jakemanger.github.io/envfetch/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fetch environmental data over spatio-temporal geometries","text":"can install development version envfetch like : enable Google Earth Engine support, follow instructions: follow prompts (saying Y prompted). Note, instructions rgee page, . See page run problems. may need set specific python environment used rgee reticulate::use_python(\"path//ee_install//r-miniconda/envs/rgee/python.exe\") replacing path//ee_install//r-miniconda/envs/rgee/python.exe path installation listed ee_install().","code":"remotes::install_github('jakemanger/envfetch') library(rgee)  ee_install(py_env = 'rgee')  ee_Initialize()"},{"path":[]},{"path":"https://jakemanger.github.io/envfetch/index.html","id":"id_1-setup-sf-collection","dir":"","previous_headings":"Example","what":"1. Setup sf collection","title":"Fetch environmental data over spatio-temporal geometries","text":"Use envfetch starts sf collection time column. example, use throw function create sf collection containing grid points Australia range times. data, load variable called d continue example. data set look like following: row sf collection sf::geometry along datetime. geometry may point polygon. datetime may time interval (lubridate::interval), date (e.g. \"20220101\") datetime \"2010-08-03 00:50:50\". Ensure data used envfetch package matches format. can visualise input data plot: plot chunk unnamed-chunk-3","code":"library(envfetch)  d <- throw(   offset=c(128, -30),   cellsize=1,   n=10,   time_interval=lubridate::interval(start='2017-01-01', end='2017-01-02'), ) summary(d) #>             time_column                  geometry   #>  Intervals        :100          POINT        :100   #>  Earliest endpoint:2017-01-01   epsg:4326    :  0   #>  Latest endpoint  :2017-01-02   +proj=long...:  0   #>  Time zone        :UTC library(ggplot2) library(rnaturalearth) library(rnaturalearthdata) #>  #> Attaching package: 'rnaturalearthdata' #> The following object is masked from 'package:rnaturalearth': #>  #>     countries110  # load map of australia for reference world <- ne_countries(scale = \"medium\", returnclass = \"sf\") australia <- subset(world, admin == \"Australia\")  ggplot(data = australia) +   geom_sf() +   geom_sf(data = d, size = 1, show.legend = \"point\") +   ggtitle(\"Australia with sample points\") +   theme_minimal()"},{"path":"https://jakemanger.github.io/envfetch/index.html","id":"id_2-extract-from-local-rasters-or-google-earth-engine-with-envfetch","dir":"","previous_headings":"Example","what":"2. Extract from local rasters or google earth engine with envfetch","title":"Fetch environmental data over spatio-temporal geometries","text":"envfetch: extracts summarises data space (within sf geometry) time (time within time range) input, provides simple function extract local files google earth engine (fast speeds, see comparison methods), ensures don’t overuse memory machine google earth engine, caches progress, don’t re-extract thing twice allows repeat sampling different times (see section 3, ). fetch data, supply envfetch data source. , can extract local netcdf data set. extract raster file, replace example_nc_path path local raster file, '/path//netcdf.nc'. data set hosted google earth engine. want extract multiple data sets , specify multiple items list. ’ve already calculated , loaded cache instantly: want change default mean summarisation behaviour (e.g., calculate mean one raster sum ) extract specific bands data, specify custom parameters:","code":"example_nc_path <- system.file(\"extdata\", \"example.nc\", package = \"envfetch\") extracted <- envfetch(x = d, r = example_nc_path) #> ── 🥏 🐕 Fetching your data ──────────────────────────────────────────────────────────────────────────────── #> → Parsing time column #> ℹ Running ~extract_over_time(x = .x, r = r[[i]], temporal_fun = temporal_fun[[i]], spatial_fun = spatial_fun[[i]], ...) #> → Loading raster at path/to/envfetch/inst/extdata/example.nc #> → Finding relevant time slices #> → Extracting data... #> → 626080 Kbs of RAM is required for extraction and 2114265600 Kbs of RAM is available #> → Completed extraction #> → Summarising extracted data over specified times #> → Detected a vectorised row summarisation function. Using optimised summarisation approach with multiple rows as inputs. #> ✔ 🐶 Completed ~extract_over_time(x = .x, r = r[[i]], temporal_fun = temporal_fun[[i]], spatial_fun = spatial_fun[[i]], ...) #>  #> ── 🐩 Fetched ──────────────────────────────────────────────────────────────────────────────────────────────  # visualise with spacetimeview library(spacetimeview) spacetimeview(extracted) extracted <- envfetch(x = d, r = 'MODIS/061/MOD13Q1') #> ── rgee 1.1.5 ─────────────────────────────────────────────────────────────────── earthengine-api 0.1.323 ──  #>  ✔ user: not_defined #>  ✔ Initializing Google Earth Engine:  DONE! #>  ✔ Earth Engine account: users/dungbeetlelab  #> ────────────────────────────────────────────────────────────────────────────────────────────────────────────  #>  #> ── 🥏 🐕 Fetching your data ──────────────────────────────────────────────────────────────────────────────── #> → Parsing time column #> ℹ Running ~extract_gee(x = .x, collection_name = r[[i]], bands = bands[[i]], temporal_fun = temporal_fun[[i]], ee_reducer_fun = spatial_fun[[i]], initialise_gee = FALSE, ...) #> Number of features: 100                                                                                    #> → Summarising extracted data over specified times #> ✔ 🐶 Completed ~extract_gee(x = .x, collection_name = r[[i]], bands = bands[[i]], temporal_fun = temporal_fun[[i]], ee_reducer_fun = spatial_fun[[i]], initialise_gee = FALSE, ...) #>  #> ── 🐩 Fetched ────────────────────────────────────────────────────────────────────────────────────────────── extracted <- envfetch(   x = d,    r = list(     example_nc_path,     'MODIS/061/MOD13Q1'   ) ) #> ── rgee 1.1.5 ─────────────────────────────────────────────────────────────────── earthengine-api 0.1.323 ──  #>  ✔ user: not_defined #>  ✔ Initializing Google Earth Engine:  DONE! #>  ✔ Earth Engine account: users/dungbeetlelab  #> ────────────────────────────────────────────────────────────────────────────────────────────────────────────  #>  #> ── 🥏 🐕 Fetching your data ──────────────────────────────────────────────────────────────────────────────── #> → Parsing time column #> ✔ 🕳️🦴 Dug up cached result of ~extract_over_time(x = .x, r = r[[i]], temporal_fun = temporal_fun[[i]], spatial_fun = spatial_fun[[i]], ...) #> ✔ 🕳️🦴 Dug up cached result of ~extract_gee(x = .x, collection_name = r[[i]], bands = bands[[i]], temporal_fun = temporal_fun[[i]], ee_reducer_fun = spatial_fun[[i]], initialise_gee = FALSE, ...) #> #> ── 🐩 Fetched ────────────────────────────────────────────────────────────────────────────────────────────── extracted <- envfetch(   x = d,    r = list(     example_nc_path,     'MODIS/061/MOD13Q1'   ),   bands = list(     'precip',     c('NDVI', 'DetailedQA')   ),   temporal_fun = list(     'sum',     'mean'   ) ) #> ── rgee 1.1.5 ─────────────────────────────────────────────────────────────────── earthengine-api 0.1.323 ──  #>  ✔ user: not_defined #>  ✔ Initializing Google Earth Engine:  DONE! #>  ✔ Earth Engine account: users/dungbeetlelab  #> ────────────────────────────────────────────────────────────────────────────────────────────────────────────  #>  #> ── 🥏 🐕 Fetching your data ──────────────────────────────────────────────────────────────────────────────── #> → Parsing time column #> ℹ Running ~extract_over_time(x = .x, r = r[[i]], temporal_fun = temporal_fun[[i]], spatial_fun = spatial_fun[[i]], ...) #> → Loading raster at path/to/envfetch/inst/extdata/example.nc #> → Finding relevant time slices #> → Extracting data... #> → 626080 Kbs of RAM is required for extraction and 2163716352 Kbs of RAM is available #> → Completed extraction #> → Summarising extracted data over specified times #> → Detected a vectorised row summarisation function. Using optimised summarisation approach with multiple rows as inputs. #> ✔ 🐶 Completed ~extract_over_time(x = .x, r = r[[i]], temporal_fun = temporal_fun[[i]], spatial_fun = spatial_fun[[i]], ...) #> ℹ Running ~extract_gee(x = .x, collection_name = r[[i]], bands = bands[[i]], temporal_fun = temporal_fun[[i]], ee_reducer_fun = spatial_fun[[i]], initialise_gee = FALSE, ...) #> Number of features: 100                                                                                    #> → Summarising extracted data over specified times #> ✔ 🐶 Completed ~extract_gee(x = .x, collection_name = r[[i]], bands = bands[[i]], temporal_fun = temporal_fun[[i]], ee_reducer_fun = spatial_fun[[i]], initialise_gee = FALSE, ...) #>  #> ── 🐩 Fetched ──────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"https://jakemanger.github.io/envfetch/index.html","id":"id_3-obtain-data-for-repeated-time-intervals","dir":"","previous_headings":"Example","what":"3. Obtain data for repeated time intervals","title":"Fetch environmental data over spatio-temporal geometries","text":"certain applications, may need obtain environmental data repeated previous time intervals. example, can extract data past six months relative time (start time interval provided) data point, summary calculated two-week block, using .time_rep variable.","code":"rep_extracted <- envfetch(   x = d,    r = list(     '/path/to/netcdf.nc',     'MODIS/061/MOD13Q1'   ),   bands = list(     'precip',     c('NDVI', 'DetailedQA')   ),   temporal_fun = list(     'sum',     'mean'   ),   .time_rep=time_rep(interval=lubridate::days(14), n_start=-12) )"},{"path":"https://jakemanger.github.io/envfetch/index.html","id":"extending-or-improving-envfetch","dir":"","previous_headings":"Example","what":"Extending or improving envfetch","title":"Fetch environmental data over spatio-temporal geometries","text":"like extend functionality envfetch (example, add new API service extract data ), can access use underlying functions caching, time repeating extracting. guide use functions, examples, can found . feature contribute, please review Contributing Guide. find error bug love hear ! Please let us know found creating issue https://github.com/jakemanger/envfetch/issues.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/calculate_daynight_times.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate_daynight_times — calculate_daynight_times","title":"calculate_daynight_times — calculate_daynight_times","text":"function calculates overlap time, specified units, two time periods defined start end times. specifically designed handling time overlaps related day night hours.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/calculate_daynight_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate_daynight_times — calculate_daynight_times","text":"","code":"calculate_daynight_times(   period1_start,   period1_finish,   period2_start,   period2_finish,   units = \"hours\" )"},{"path":"https://jakemanger.github.io/envfetch/reference/calculate_daynight_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate_daynight_times — calculate_daynight_times","text":"period1_start POSIXct object representing start time first period. period1_finish POSIXct object representing finish time first period. period2_start POSIXct object representing start time second period. period2_finish POSIXct object representing finish time second period. units string representing units output time, defaults 'hours'.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/calculate_daynight_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculate_daynight_times — calculate_daynight_times","text":"numeric representing time overlap two periods specified units.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/calculate_daynight_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculate_daynight_times — calculate_daynight_times","text":"","code":"if (FALSE) { # \\dontrun{ overlap_hours <- calculate_daynight_times(   period1_start = as.POSIXct('2023-07-17 06:00:00'),   period1_finish = as.POSIXct('2023-07-17 18:00:00'),   period2_start = as.POSIXct('2023-07-17 12:00:00'),   period2_finish = as.POSIXct('2023-07-17 20:00:00'),   units = 'hours' ) } # }"},{"path":"https://jakemanger.github.io/envfetch/reference/create_time_lags.html","id":null,"dir":"Reference","previous_headings":"","what":"create_time_lags — create_time_lags","title":"create_time_lags — create_time_lags","text":"function creates time-lagged rows tibble using 'time_column' reference point. new rows filled NA values time interval shifted specified lag duration.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/create_time_lags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_time_lags — create_time_lags","text":"","code":"create_time_lags(   x,   n_lag_range = c(1, 14),   time_lag = lubridate::days(14),   lag_amount_units = lubridate::days(1),   relative_to_start = TRUE,   time_column_name = \"time_column\" )"},{"path":"https://jakemanger.github.io/envfetch/reference/create_time_lags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_time_lags — create_time_lags","text":"x tibble containing original data. n_lag_range numeric vector length 2 defining range lag times. time_lag duration object specifying size time lag. lag_amount_units duration object numeric seconds determines unit 'lag_amount' column. relative_to_start logical value indicating whether lag relative start end input time interval. time_column_name Name time column x.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/create_time_lags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create_time_lags — create_time_lags","text":"tibble original data additional time-lagged rows.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/create_time_lags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create_time_lags — create_time_lags","text":"","code":"if (FALSE) { # \\dontrun{ lagged_tibble <- create_time_lags(   x = original_tibble,   n_lag_range = c(1, 14),   time_lag = lubridate::days(14),   lag_amount_units = lubridate::days(1),   relative_to_start = TRUE ) } # }"},{"path":"https://jakemanger.github.io/envfetch/reference/envfetch.html","id":null,"dir":"Reference","previous_headings":"","what":"envfetch: Fetch environmental data over spatio-temporal geometries — envfetch","title":"envfetch: Fetch environmental data over spatio-temporal geometries — envfetch","text":"envfetch extracts environmental data spatio-temporal inputs local raster datasets Google Earth Engine. time time range extraction can vary geometries. function includes features caching, memory management, data summarisation. extracting multiple data sources, ensure custom parameters r, bands, temporal_fun spatial_fun specified appropriately.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/envfetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"envfetch: Fetch environmental data over spatio-temporal geometries — envfetch","text":"","code":"envfetch(   x,   r = NULL,   bands = NULL,   temporal_fun = \"mean\",   spatial_fun = \"mean\",   scale = NULL,   max_feature_collection_size = 5000,   use_cache = TRUE,   out_dir = file.path(\"./output/\"),   out_filename = NA,   overwrite = TRUE,   cache_dir = file.path(out_dir, \"cache/\"),   cache_files = NA,   time_column_name = NULL,   .time_rep = NA,   init_gee = TRUE,   ... )"},{"path":"https://jakemanger.github.io/envfetch/reference/envfetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"envfetch: Fetch environmental data over spatio-temporal geometries — envfetch","text":"x sf collection geometry column time column (Date, datetime range datetimes lubridate::interval). r Specifies data source: either local raster file path (can include subdatasets) Google Earth Engine collection name. multiple sources, provide list also specify bands temporal_fun, optionally time_column_name, parameters accordingly. bands Numeric character vector specifying band numbers names extract. Use NULL extract bands. multiple sources, provide list vectors. temporal_fun Function string used summarize data time interval. ignored time date datetime. Default mean(x, na.rm=TRUE). string 'last' returns value start time interval, 'next' returns value start time interval 'closest' finds closest value start time interval. multiple sources, provide list functions strings. spatial_fun Function string used summarize data spatially (x polygon). Default ('mean') local files mean(x, na.rm=TRUE) google earth engine rgee::ee$Reducer$mean(). local files, use NULL summarise spatially summarising temporally.  extracting google earth engine, must specify google earth engine reducer rgee::ee$Reducer function (e.g. rgee::ee$Reducer$sum()). See https://r-spatial.github.io/rgee/reference/ee_extract.html\". different behaviour multiple sources, provide list functions strings. scale Numeric vector specifying scales aggregate rasters extraction. Use NULL aggregation. multiple sources, provide list vectors. max_feature_collection_size integer representing maximum number features (rows) include chunk splitting dataset efficient memory use Google Earth Engine's end. Default 5000. use_cache Logical flag indicating whether use caching. Default TRUE. out_dir Output directory files. Default ./output/. out_filename Name output file, defaulting timestamped .gpkg file. overwrite Logical flag overwrite existing output files. Default TRUE. cache_dir Directory caching files. Default ./output/cache/. cache_files Paths cached files. Specify cache system automatically detected cache. ignored use_cache = FALSE. time_column_name Name time column x. Use NULL auto-select time column type lubridate::interval. Default NULL. .time_rep Specifies repeating time intervals extraction. Default NA. init_gee logical indicating whether initialise Google Earth Engine within function. Default TRUE. ... Arguments passed extract_over_time, fetch, extract_over_space, extract_gee subds positive integer character select sub-dataset extract . zero \"\", sub-datasets extracted. spatial_extraction_fun function used extract points spatially time slice raster. Default default implementation extract_over_space (extracts mean geometries within rasters, removing NAs). time_buffer Time buffer used adjust time interval data extraction. function always uses time interval prevent errors summarising earliest latest times. Default 0 days. debug TRUE, pauses function displays plot extracted point. useful debugging unexpected extracted values. Default FALSE. override_terraOptions TRUE, overrides terra's default terraOptions specified envfetch's package. Default TRUE. is_vectorised_summarisation_function Whether summarisation vectorised (like rowSums rowMeans). necessary TRUE row-wise vectorised summarisation function automatically detected (use rowSums rowMeans). verbose Whether print messages console. Defaults TRUE. trim_raster Whether trim raster time bounds performance optimisation. Defaults TRUE. subset_raster_indices Whether subset raster time indices performance optimisation. Defaults TRUE. batch_size maximum number rows geometries extract summarise time. batch cached continue extraction case interruptions. Larger batch sizes may result overuse rgee server-side hangs. Set batch_size 1, NA <1 batching. Use funs_to_use_batch_size define functions batch_size used . funs_to_use_batch_size vector names functions want use batch_size . Batch size useful functions (rgee: 'extract_gee') others (local: 'extract_over_time'). Defaults c('extract_gee'). do_initial_sort Whether initially sort unique input data x space (use_space_in_initial_sort TRUE) time efficiency later extraction processes. Defaults TRUE. use_space_in_initial_sort Whether initially sort unique input data x space addition time efficiency later extraction processes. Defaults FALSE. chunk Logical. TRUE, raster split chunks based available RAM processed chunk chunk. FALSE, raster processed whole. Default TRUE. na.rm Whether remove NA values summarising spatial_fun function. extraction_fun extraction function use. Default terra::extract. max_ram_frac_per_chunk maximum fraction available memory use extraction chunk. collection_name character string representing Google Earth Engine image collection extract data. lazy logical indicating whether download Google Earth Engine data lazily future::sequential objects evaluate task future. Defaults FALSE. initialise_gee logical indicating whether initialise Google Earth Engine within function. Default TRUE. use_gcs logical indicating whether use Google Cloud Storage larger requests. Default FALSE. use_drive logical indicating whether use Google Drive larger requests. Default FALSE. max_chunk_time_day_range string representing maximum number time units include time chunk splitting dataset efficient memory use Google Earth Engine's end. Default '3 months'. ee_reducer_fun Google Earth Engine reducer function representing function used aggregate data extracted image. Default rgee::ee$Reducer$mean().","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/envfetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"envfetch: Fetch environmental data over spatio-temporal geometries — envfetch","text":"enhanced version input sf collection, x, augmented extracted environmental data.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/envfetch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"envfetch: Fetch environmental data over spatio-temporal geometries — envfetch","text":"envfetch serves high-level wrapper specific data extraction methods: local raster files, employs extract_over_time datetime ranges stars::st_extract single datetimes. Google Earth Engine collections, uses extract_gee. also supports caching, allowing avoid repeated calculations resume work interruptions.","code":""},{"path":[]},{"path":"https://jakemanger.github.io/envfetch/reference/envfetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"envfetch: Fetch environmental data over spatio-temporal geometries — envfetch","text":"","code":"if (FALSE) { # \\dontrun{ # local raster file path example extracted_data <- envfetch(x = my_data, r = \"/path/to/local/raster/file.tif\")  # loaded raster object example library(terra) r <- rast(\"/path/to/local/raster/file.tif\") extracted_data <- envfetch(x = my_data, r = r)  # Google Earth Engine example extracted_gee_data <- envfetch(   x = my_data,   r = \"GEE_COLLECTION_NAME\",   bands = c('BAND_NAME_1', 'BAND_NAME_2'),   time_column_name = \"time\" )  # multiple data sources example (both local raster and Google Earth Engine) extracted_multi_data <- envfetch(   x = my_data,   r = list(     \"/path/to/local/raster/file1.tif\",     \"GEE_COLLECTION_NAME1\",     \"/path/to/local/raster/file2.tif\"   ),   bands = list(c(1, 2), c('BAND_NAME_1', 'BAND_NAME_2'), c(3, 4)),   temporal_fun = list(mean, 'last', median),   time_column_name = \"time\" ) } # }"},{"path":"https://jakemanger.github.io/envfetch/reference/extract_gee.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts specified bands from an image collection using Google Earth Engine — extract_gee","title":"Extracts specified bands from an image collection using Google Earth Engine — extract_gee","text":"function uses Google Earth Engine extract specified bands image collection. function summarises information row dataset (x). function handles memory constraints Google Earth Engine's end extracting data time chunks based start date interval dataset. function best used within fetch function.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/extract_gee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts specified bands from an image collection using Google Earth Engine — extract_gee","text":"","code":"extract_gee(   x,   collection_name,   bands,   scale = 250,   time_buffer = lubridate::days(20),   temporal_fun = \"last\",   lazy = FALSE,   debug = FALSE,   initialise_gee = TRUE,   use_gcs = FALSE,   use_drive = FALSE,   max_chunk_time_day_range = \"3 months\",   max_feature_collection_size = 5000,   ee_reducer_fun = rgee::ee$Reducer$mean(),   time_column_name = NULL,   verbose = TRUE,   is_vectorised_summarisation_function = FALSE,   ... )"},{"path":"https://jakemanger.github.io/envfetch/reference/extract_gee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts specified bands from an image collection using Google Earth Engine — extract_gee","text":"x sf collection geometry column time column. collection_name character string representing Google Earth Engine image collection extract data. bands vector character strings representing band names extract image collection. scale numeric value representing scale perform extraction meters. Default 250. time_buffer lubridate duration representing amount time add time interval filtering image collection. Default lubridate::days(20). temporal_fun function string representing function used summarise data extracted interval. Default 'last', returns value closest start interval. built-options 'closest' 'next'. lazy logical indicating whether download Google Earth Engine data lazily future::sequential objects evaluate task future. Defaults FALSE. debug logical indicating whether produce debugging plots. Default FALSE. initialise_gee logical indicating whether initialise Google Earth Engine within function. Default TRUE. use_gcs logical indicating whether use Google Cloud Storage larger requests. Default FALSE. use_drive logical indicating whether use Google Drive larger requests. Default FALSE. max_chunk_time_day_range string representing maximum number time units include time chunk splitting dataset efficient memory use Google Earth Engine's end. Default '3 months'. max_feature_collection_size integer representing maximum number features (rows) include chunk splitting dataset efficient memory use Google Earth Engine's end. Default 5000. ee_reducer_fun Google Earth Engine reducer function representing function used aggregate data extracted image. Default rgee::ee$Reducer$mean(). time_column_name Name time column dataset. NULL (default), column type lubridate::interval automatically selected. verbose Whether print messages console. Defaults TRUE. is_vectorised_summarisation_function Whether summarisation vectorised (like rowSums rowMeans). necessary TRUE row-wise vectorised summarisation function automatically detected (use rowSums rowMeans). ... Additional arguments underlying extraction function, rgee::ee_extract.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/extract_gee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts specified bands from an image collection using Google Earth Engine — extract_gee","text":"dataframe sf object rows input x, new columns representing extracted data. new column names correspond bands parameter.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/extract_gee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts specified bands from an image collection using Google Earth Engine — extract_gee","text":"","code":"if (FALSE) { # \\dontrun{ #' extracted <- d %>%   fetch(     ~extract_gee(        .x,        collection_name='MODIS/061/MOD13Q1',        bands=c('NDVI', 'DetailedQA'),        time_buffer=16,      )   )  # extract and summarise data every fortnight for the last six months # relative to the start of the time column in `d` rep_extracted <- d %>%   fetch(     ~extract_gee(        .x,        collection_name='MODIS/061/MOD13Q1',        bands=c('NDVI', 'DetailedQA'),        time_buffer=16,      ),     .time_rep=time_rep(interval=lubridate::days(14), n_start=-12),   ) } # }"},{"path":"https://jakemanger.github.io/envfetch/reference/extract_over_space.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Values from a Raster Layer over a space — extract_over_space","title":"Extract Values from a Raster Layer over a space — extract_over_space","text":"function extracts values raster layer (r) spatial object (x). spatial object contains multiple z indices (e.g. time), spatial extractions time returned. also ensures extraction exceed available RAM. raster large, function can chunk raster smaller pieces process chunk sequentially avoid memory overflow.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/extract_over_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Values from a Raster Layer over a space — extract_over_space","text":"","code":"extract_over_space(   x,   r,   spatial_fun = mean,   na.rm = TRUE,   chunk = TRUE,   max_ram_frac_per_chunk = 1,   extraction_fun = terra::extract,   scale = NULL,   verbose = TRUE,   ... )"},{"path":"https://jakemanger.github.io/envfetch/reference/extract_over_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Values from a Raster Layer over a space — extract_over_space","text":"x sf spatial object, representing locations raster values need extracted. r terra::SpatRaster object, representing raster layer values need extracted. spatial_fun Function used summarise multiple values within polygon line. passed extraction_fun internally. Defaults mean. na.rm Whether remove NA values summarising spatial_fun function. chunk Logical. TRUE, raster split chunks based available RAM processed chunk chunk. FALSE, raster processed whole. Default TRUE. max_ram_frac_per_chunk maximum fraction available memory use extraction chunk. extraction_fun extraction function use. Default terra::extract. scale scale aggregate raster (units original raster). Note rounded fit nearest aggregation factor (number cells direction). Leave NULL (default) want aggregation. See aggregate. verbose Whether print messages console. Defaults TRUE. ... Additional arguments pass terra::extract.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/extract_over_space.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Values from a Raster Layer over a space — extract_over_space","text":"matrix list column corresponds raster layer row corresponds geometry x. values represent raster values point's location.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/extract_over_space.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Values from a Raster Layer over a space — extract_over_space","text":"function uses terra::mem_info function assess RAM requirements extraction. chunking required (.e., raster data fit available RAM), raster divided number chunks chunk's RAM requirement exceed available RAM. function processes chunk sequentially, extracting raster values spatial object, combines results end. Progress extraction displayed.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/extract_over_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Values from a Raster Layer over a space — extract_over_space","text":"","code":"# Assuming 'some_raster' is a terra::SpatRaster object and 'some_sp' is a # spatial object: # result <- extract_over_space(x=some_sp, r=some_raster)"},{"path":"https://jakemanger.github.io/envfetch/reference/extract_over_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract values from a raster over time — extract_over_time","title":"Extract values from a raster over time — extract_over_time","text":"function extracts raster data time ranges row summarises extracted data using custom function. function summarises information row dataset (x). function best used within fetch function.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/extract_over_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract values from a raster over time — extract_over_time","text":"","code":"extract_over_time(   x,   r,   subds = 0,   temporal_fun = function(x) {      rowMeans(x, na.rm = TRUE)  },   spatial_extraction_fun = function(x, r, ...) {      extract_over_space(x = x, r = r,     ...)  },   scale = NULL,   time_buffer = lubridate::days(0),   debug = FALSE,   override_terraOptions = TRUE,   time_column_name = NULL,   is_vectorised_summarisation_function = FALSE,   verbose = TRUE,   trim_raster = TRUE,   subset_raster_indices = TRUE,   ... )"},{"path":"https://jakemanger.github.io/envfetch/reference/extract_over_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract values from a raster over time — extract_over_time","text":"x sf collection geometry column time column. r file path raster file SpatRaster object terra package. raster data. source data extracted. subds positive integer character select sub-dataset extract . zero \"\", sub-datasets extracted. temporal_fun function used summarise multiple data points found within time interval. Default rowMeans(x, na.rm=TRUE). user can supply vectorised summarisation functions (using rowMeans rowSums) non-vectorised summarisation functions (e.g., sum, mean, min, max). supplying custom vectorised temporal_fun, set is_vectorised_temporal_fun TRUE ensure vectorised approach used performance. Note, vectorised summarisation functions possible fun=NULL extracting polygon line geometries (.e. temporal_fun used summarise, treating time space value independently). spatial_extraction_fun function used extract points spatially time slice raster. Default default implementation extract_over_space (extracts mean geometries within rasters, removing NAs). scale scale aggregate raster (units original raster). Note rounded fit nearest aggregation factor (number cells direction). Leave NULL (default) want aggregation. See aggregate. time_buffer Time buffer used adjust time interval data extraction. function always uses time interval prevent errors summarising earliest latest times. Default 0 days. debug TRUE, pauses function displays plot extracted point. useful debugging unexpected extracted values. Default FALSE. override_terraOptions TRUE, overrides terra's default terraOptions specified envfetch's package. Default TRUE. time_column_name Name time column dataset. NULL (default), column type lubridate::interval automatically selected. is_vectorised_summarisation_function Whether summarisation vectorised (like rowSums rowMeans). necessary TRUE row-wise vectorised summarisation function automatically detected (use rowSums rowMeans). verbose Whether print messages console. Defaults TRUE. trim_raster Whether trim raster time bounds performance optimisation. Defaults TRUE. subset_raster_indices Whether subset raster time indices performance optimisation. Defaults TRUE. ... Additional arguments pass spatial_extraction_fun.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/extract_over_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract values from a raster over time — extract_over_time","text":"modified version input 'x' additional columns containing extracted data.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/extract_over_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract values from a raster over time — extract_over_time","text":"","code":"if (FALSE) { # \\dontrun{ extracted <- d %>%   fetch(     ~extract_over_time(.x, r = '/path/to/netcdf.nc'),   )  # extract and summarise data every fortnight for the past six months # relative to the start of the time column in `d` rep_extracted <- d %>%   fetch(       ~extract_over_time(.x, r = '/path/to/netcdf.nc'),       .time_rep=time_rep(interval=lubridate::days(14), n_start=-12),   ) } # }"},{"path":"https://jakemanger.github.io/envfetch/reference/fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch data from each row using anonymous functions — fetch","title":"Fetch data from each row using anonymous functions — fetch","text":"function passes data supplied extraction functions, caches progress, function crashes somewhere, can continue left , shows progress estimated time completion allows repeat sampling across different times.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch data from each row using anonymous functions — fetch","text":"","code":"fetch(   x,   ...,   use_cache = TRUE,   out_dir = file.path(\"./output/\"),   out_filename = NA,   overwrite = TRUE,   cache_dir = file.path(out_dir, \"cache/\"),   cache_files = NA,   time_column_name = NULL,   .time_rep = NA,   batch_size = 20000,   funs_to_use_batch_size = c(\"extract_gee\"),   do_initial_sort = TRUE,   use_space_in_initial_sort = TRUE )"},{"path":"https://jakemanger.github.io/envfetch/reference/fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch data from each row using anonymous functions — fetch","text":"x tibble sf \"geometry\" column time (lubridate interval date), detected automatically specified time_column_name parameter. ... Arguments passed extract_over_time, extract_gee r file path raster file SpatRaster object terra package. raster data. source data extracted. subds positive integer character select sub-dataset extract . zero \"\", sub-datasets extracted. temporal_fun function used summarise multiple data points found within time interval. Default rowMeans(x, na.rm=TRUE). user can supply vectorised summarisation functions (using rowMeans rowSums) non-vectorised summarisation functions (e.g., sum, mean, min, max). supplying custom vectorised temporal_fun, set is_vectorised_temporal_fun TRUE ensure vectorised approach used performance. Note, vectorised summarisation functions possible fun=NULL extracting polygon line geometries (.e. temporal_fun used summarise, treating time space value independently). spatial_extraction_fun function used extract points spatially time slice raster. Default default implementation extract_over_space (extracts mean geometries within rasters, removing NAs). scale scale aggregate raster (units original raster). Note rounded fit nearest aggregation factor (number cells direction). Leave NULL (default) want aggregation. See aggregate. time_buffer Time buffer used adjust time interval data extraction. function always uses time interval prevent errors summarising earliest latest times. Default 0 days. debug TRUE, pauses function displays plot extracted point. useful debugging unexpected extracted values. Default FALSE. override_terraOptions TRUE, overrides terra's default terraOptions specified envfetch's package. Default TRUE. is_vectorised_summarisation_function Whether summarisation vectorised (like rowSums rowMeans). necessary TRUE row-wise vectorised summarisation function automatically detected (use rowSums rowMeans). trim_raster Whether trim raster time bounds performance optimisation. Defaults TRUE. subset_raster_indices Whether subset raster time indices performance optimisation. Defaults TRUE. collection_name character string representing Google Earth Engine image collection extract data. bands vector character strings representing band names extract image collection. lazy logical indicating whether download Google Earth Engine data lazily future::sequential objects evaluate task future. Defaults FALSE. initialise_gee logical indicating whether initialise Google Earth Engine within function. Default TRUE. use_gcs logical indicating whether use Google Cloud Storage larger requests. Default FALSE. use_drive logical indicating whether use Google Drive larger requests. Default FALSE. max_chunk_time_day_range string representing maximum number time units include time chunk splitting dataset efficient memory use Google Earth Engine's end. Default '3 months'. max_feature_collection_size integer representing maximum number features (rows) include chunk splitting dataset efficient memory use Google Earth Engine's end. Default 5000. ee_reducer_fun Google Earth Engine reducer function representing function used aggregate data extracted image. Default rgee::ee$Reducer$mean(). use_cache Whether cache progress. Allows continue left case error process interrupted. Also avoids recomputing extractions R sessions. out_dir directory output result. ignored out_filename = NA. out_filename path output result. Set NA (default) save result return result. overwrite Overwrite output file exists. cache_dir directory output cached progress. ignored use_cache = FALSE. cache_files Paths cached files. Specify cache system automatically detected cache. ignored use_cache = FALSE. time_column_name Name time column dataset. NULL (default), column type lubridate::interval automatically selected. .time_rep time_rep object. Used repeat data extraction along repeating time intervals original datetime. can relative start end input time interval (specified relative_to_start argument time_rep). Defaults start. batch_size maximum number rows geometries extract summarise time. batch cached continue extraction case interruptions. Larger batch sizes may result overuse rgee server-side hangs. Set batch_size 1, NA <1 batching. Use funs_to_use_batch_size define functions batch_size used . funs_to_use_batch_size vector names functions want use batch_size . Batch size useful functions (rgee: 'extract_gee') others (local: 'extract_over_time'). Defaults c('extract_gee'). do_initial_sort Whether initially sort unique input data x space (use_space_in_initial_sort TRUE) time efficiency later extraction processes. Defaults TRUE. use_space_in_initial_sort Whether initially sort unique input data x space addition time efficiency later extraction processes. Defaults FALSE.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch data from each row using anonymous functions — fetch","text":"tibble augmented tibble additional data fetched using supplied functions.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/fetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch data from each row using anonymous functions — fetch","text":"","code":"if (FALSE) { # \\dontrun{ extracted <- d %>%   fetch(     ~extract_across_times(.x, r = '/path/to/netcdf.nc'),     ~extract_gee(        .x,        collection_name='MODIS/061/MOD13Q1',        bands=c('NDVI', 'DetailedQA'),        time_buffer=16,      )   )  # extract and summarise data every fortnight for the last six months # relative to the start of the time column in `d` rep_extracted <- d %>%   fetch(     ~extract_across_times(.x, r = '/path/to/netcdf.nc'),     ~extract_gee(        .x,        collection_name='MODIS/061/MOD13Q1',        bands=c('NDVI', 'DetailedQA'),        time_buffer=16,      ),     .time_rep=time_rep(interval=lubridate::days(14), n_start=-12),   ) } # }"},{"path":"https://jakemanger.github.io/envfetch/reference/find_closest_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the closest datetime in a vector — find_closest_datetime","title":"Find the closest datetime in a vector — find_closest_datetime","text":"Finds closest matching datetime (=TRUE), (=FALSE) either (default =NA)","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/find_closest_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the closest datetime in a vector — find_closest_datetime","text":"","code":"find_closest_datetime(dates, x, before = NA)"},{"path":"https://jakemanger.github.io/envfetch/reference/find_closest_datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the closest datetime in a vector — find_closest_datetime","text":"dates vector dates datetimes x single date datetime Leave NA (default) find closest specify boolean closest datetime x (TRUE) x (FALSE)","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/find_closest_datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the closest datetime in a vector — find_closest_datetime","text":"logical vector length dates.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/get_day_night_hours.html","id":null,"dir":"Reference","previous_headings":"","what":"get_day_night_hours — get_day_night_hours","title":"get_day_night_hours — get_day_night_hours","text":"function calculates number day night hours given time range location.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/get_day_night_hours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_day_night_hours — get_day_night_hours","text":"","code":"get_day_night_hours(start, finish, lat, lon, units = \"hours\")"},{"path":"https://jakemanger.github.io/envfetch/reference/get_day_night_hours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_day_night_hours — get_day_night_hours","text":"start POSIXct object representing start time. finish POSIXct object representing end time. lat latitude location. lon longitude location. units string representing units output time, defaults 'hours'.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/get_day_night_hours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_day_night_hours — get_day_night_hours","text":"list containing number day night hours.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/get_day_night_hours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_day_night_hours — get_day_night_hours","text":"","code":"if (FALSE) { # \\dontrun{ day_night_hours <- get_day_night_hours(   start = Sys.time(),   finish = Sys.time() + lubridate::hours(24),   lat = 51.5074,   lon = 0.1278,   units = 'minutes' ) } # }"},{"path":"https://jakemanger.github.io/envfetch/reference/get_daynight_times.html","id":null,"dir":"Reference","previous_headings":"","what":"get_daynight_times — get_daynight_times","title":"get_daynight_times — get_daynight_times","text":"function calculates time since sunrise, time since sunset, day night hours points sf object. function also optionally saves output RDS file.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/get_daynight_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_daynight_times — get_daynight_times","text":"","code":"get_daynight_times(   points,   time_column_name = NULL,   save = FALSE,   savepath = \"./output/extracted_day_night_stats.rds\",   units = \"hours\" )"},{"path":"https://jakemanger.github.io/envfetch/reference/get_daynight_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_daynight_times — get_daynight_times","text":"points sf object containing geometry time_column datetime lubridate::interval. time_column_name Name time column dataset. NULL (default), column type lubridate::interval automatically selected. save logical value indicating whether save extracted day night time information RDS file. Default FALSE. savepath path save RDS file, defaults './output/extracted_day_night_stats.rds'. units string specifying units time return, defaults 'hours'.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/get_daynight_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_daynight_times — get_daynight_times","text":"sf object containing original points additional day night time-related information.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/get_daynight_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_daynight_times — get_daynight_times","text":"","code":"if (FALSE) { # \\dontrun{ sf_with_times <- get_daynight_times(   points_sf,   save=TRUE,   savepath='./daynight.rds', units='minutes' ) } # }"},{"path":"https://jakemanger.github.io/envfetch/reference/get_time_since_sunrise.html","id":null,"dir":"Reference","previous_headings":"","what":"get_time_since_sunrise — get_time_since_sunrise","title":"get_time_since_sunrise — get_time_since_sunrise","text":"function calculates time elapsed since sunrise given specific location time.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/get_time_since_sunrise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_time_since_sunrise — get_time_since_sunrise","text":"","code":"get_time_since_sunrise(start, lat, lon, units = \"hours\")"},{"path":"https://jakemanger.github.io/envfetch/reference/get_time_since_sunrise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_time_since_sunrise — get_time_since_sunrise","text":"start POSIXct object representing start time. lat latitude location. lon longitude location. units string representing units output time, defaults 'hours'.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/get_time_since_sunrise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_time_since_sunrise — get_time_since_sunrise","text":"numeric representing time elapsed since sunrise.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/get_time_since_sunrise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_time_since_sunrise — get_time_since_sunrise","text":"","code":"if (FALSE) { # \\dontrun{ time_since_sunrise <- get_time_since_sunrise(   start = Sys.time(),   lat = 51.5074,   lon = 0.1278,   units = 'minutes' ) } # }"},{"path":"https://jakemanger.github.io/envfetch/reference/get_time_since_sunset.html","id":null,"dir":"Reference","previous_headings":"","what":"get_time_since_sunset — get_time_since_sunset","title":"get_time_since_sunset — get_time_since_sunset","text":"function calculates time elapsed since sunset given specific location time.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/get_time_since_sunset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_time_since_sunset — get_time_since_sunset","text":"","code":"get_time_since_sunset(start, lat, lon, units = \"hours\")"},{"path":"https://jakemanger.github.io/envfetch/reference/get_time_since_sunset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_time_since_sunset — get_time_since_sunset","text":"start POSIXct object representing start time. lat latitude location. lon longitude location. units string representing units output time, defaults 'hours'.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/get_time_since_sunset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_time_since_sunset — get_time_since_sunset","text":"numeric representing time elapsed since sunset.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/get_time_since_sunset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_time_since_sunset — get_time_since_sunset","text":"","code":"if (FALSE) { # \\dontrun{ time_since_sunset <- get_time_since_sunset(   start = Sys.time(),   lat = 51.5074,   lon = 0.1278,   units = 'minutes' ) } # }"},{"path":"https://jakemanger.github.io/envfetch/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://jakemanger.github.io/envfetch/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/throw.html","id":null,"dir":"Reference","previous_headings":"","what":"throw — throw","title":"throw — throw","text":"function creates sample points extracting data grid. generates grid points polygons specified region, assigns grid cell specific time interval. points can used extracting data raster spatial data sources.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/throw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"throw — throw","text":"","code":"throw(   offset = c(-180, -90),   cellsize = c(10, 10),   n = c(36, 18),   time_interval,   crs = sf::st_crs(4326),   what = \"centers\",   square = TRUE,   flat_topped = FALSE )"},{"path":"https://jakemanger.github.io/envfetch/reference/throw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"throw — throw","text":"offset numeric vector length 2 indicating offset origin grid. Default c(-180, -90). cellsize numeric vector length 1 2 indicating size cells grid. Default c(10, 10). n numeric vector length 1 2 indicating number cells grid x y directions. Default c(36, 18). time_interval interval object lubridate package, indicating time span point. Alternatively, single date, interpreted interval day envfetch. crs coordinate reference system object sf package. Default sf::st_crs(4326), WGS 84 geographic coordinate system. string indicating kind geometries return: 'centers' point geometries center cells, 'polygons' polygon geometries filling cells. Default 'centers'. square logical indicating whether use square cells. Default TRUE. flat_topped logical indicating whether use flat-topped pointy-topped hexagon cells. Ignored square TRUE. Default FALSE.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/throw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"throw — throw","text":"sf object point geometries associated time column.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/throw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"throw — throw","text":"","code":"if (FALSE) { # \\dontrun{ sample_points <- throw(   offset = c(119.625, -30.775),   cellsize = 1,   n = 4,   time_interval = lubridate::interval(     start = lubridate::ymd(\"2018-01-01\"),     end = lubridate::ymd(\"2018-01-04\")   ),   crs = sf::st_crs(4326),   what = 'centers',   square = TRUE,   flat_topped = FALSE ) } # }"},{"path":"https://jakemanger.github.io/envfetch/reference/time_in_period.html","id":null,"dir":"Reference","previous_headings":"","what":"time_in_period — time_in_period","title":"time_in_period — time_in_period","text":"function calculates overlap time, specified units, two time periods defined start end times.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/time_in_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"time_in_period — time_in_period","text":"","code":"time_in_period(   period1_start,   period1_finish,   period2_start,   period2_finish,   units = \"hours\" )"},{"path":"https://jakemanger.github.io/envfetch/reference/time_in_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"time_in_period — time_in_period","text":"period1_start POSIXct object representing start time first period. period1_finish POSIXct object representing finish time first period. period2_start POSIXct object representing start time second period. period2_finish POSIXct object representing finish time second period. units string representing units output time, defaults 'hours'.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/time_in_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"time_in_period — time_in_period","text":"numeric representing time overlap two periods specified units.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/time_in_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"time_in_period — time_in_period","text":"","code":"if (FALSE) { # \\dontrun{ overlap_hours <- time_in_period(   period1_start = as.POSIXct('2023-07-17 06:00:00'),   period1_finish = as.POSIXct('2023-07-17 18:00:00'),   period2_start = as.POSIXct('2023-07-17 12:00:00'),   period2_finish = as.POSIXct('2023-07-17 20:00:00'),   units = 'hours' ) } # }"},{"path":"https://jakemanger.github.io/envfetch/reference/time_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a time_rep object for repeating time intervals — time_rep","title":"Creates a time_rep object for repeating time intervals — time_rep","text":"time_rep function used fetch function internally. generates list object specified time intervals, settings repeated sampling environmental data original datetime. function validates input parameters ensure correct types meet certain conditions.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/time_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a time_rep object for repeating time intervals — time_rep","text":"","code":"time_rep(interval, n_start = -1, n_end = 0, relative_to_start = TRUE)"},{"path":"https://jakemanger.github.io/envfetch/reference/time_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a time_rep object for repeating time intervals — time_rep","text":"interval lubridate period indicating time interval repeat. positive, e.g. lubridate::days(14). n_start integer indicating number steps original datetime interval start repeating. Default -1. Note inclusive. n_end integer indicating number steps original datetime interval continue repeating. Default 0. Note, exclusive. relative_to_start Whether create repeating time intervals relative start input time interval end.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/time_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a time_rep object for repeating time intervals — time_rep","text":"list object three elements: interval, n_start, n_end.","code":""},{"path":"https://jakemanger.github.io/envfetch/reference/time_rep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a time_rep object for repeating time intervals — time_rep","text":"","code":"# Generates a time_rep object for a 14-day interval, starting 14 days before # the original datetime and ending at the original datetime. time_rep(lubridate::days(14)) #> $interval #> [1] \"14d 0H 0M 0S\" #>  #> $n_start #> [1] -1 #>  #> $n_end #> [1] 0 #>  #> $relative_to_start #> [1] TRUE #>  # Generate a time_rep object for multiple 14-day intervals, between 28 # periods before and ending 42 periods after the original datetime time_rep(lubridate::days(14), -2, 3) #> $interval #> [1] \"14d 0H 0M 0S\" #>  #> $n_start #> [1] -2 #>  #> $n_end #> [1] 3 #>  #> $relative_to_start #> [1] TRUE #>"}]
